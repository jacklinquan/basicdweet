{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Basic Dweet Documentation Basic APIs of the free dweet service. Dweet is a simple machine-to-machine (M2M) service from dweet.io . This module only supports these dweet APIs of the free dweet service: dweet for get latest dweet for get dweets for It also can be used in MicroPython. Installation Synchronous Programming pip install basicdweet Asynchronous Programming pip install basicdweet [ aiohttp ] Usage Synchronous Programming Code import time import basicdweet print ( basicdweet . dweet_for ( \"YOUR_THING\" , { \"YOUR_DATA\" : \"YOUR_VALUE\" })) time . sleep ( 2 ) print ( basicdweet . get_latest_dweet_for ( \"YOUR_THING\" )) time . sleep ( 2 ) print ( basicdweet . dweet_for ( \"YOUR_THING\" , { \"YOUR_DATA\" : \"YOUR_VALUE_2\" })) time . sleep ( 2 ) print ( basicdweet . get_latest_dweet_for ( \"YOUR_THING\" )) time . sleep ( 2 ) print ( basicdweet . get_dweets_for ( \"YOUR_THING\" )) Output {'thing': 'YOUR_THING', 'created': '2024-07-05T04:53:36.896Z', 'content': {'YOUR_DATA': 'YOUR_VALUE'}, 'transaction': '9cd0b361-05fc-451d-be7b-280172242f25'} [{'thing': 'YOUR_THING', 'created': '2024-07-05T04:53:36.896Z', 'content': {'YOUR_DATA': 'YOUR_VALUE'}}] {'thing': 'YOUR_THING', 'created': '2024-07-05T04:53:42.697Z', 'content': {'YOUR_DATA': 'YOUR_VALUE_2'}, 'transaction': '926d396d-cf41-4feb-89c3-46ffb0960053'} [{'thing': 'YOUR_THING', 'created': '2024-07-05T04:53:42.697Z', 'content': {'YOUR_DATA': 'YOUR_VALUE_2'}}] [{'thing': 'YOUR_THING', 'created': '2024-07-05T04:53:42.697Z', 'content': {'YOUR_DATA': 'YOUR_VALUE_2'}}, {'thing': 'YOUR_THING', 'created': '2024-07-05T04:53:36.896Z', 'content': {'YOUR_DATA': 'YOUR_VALUE'}}] Asynchronous Programming Code import asyncio import basicdweet async def async_test (): print ( await basicdweet . async_dweet_for ( \"YOUR_THING\" , { \"YOUR_DATA\" : \"YOUR_VALUE\" })) await asyncio . sleep ( 2 ) print ( await basicdweet . async_get_latest_dweet_for ( \"YOUR_THING\" )) await asyncio . sleep ( 2 ) print ( await basicdweet . async_dweet_for ( \"YOUR_THING\" , { \"YOUR_DATA\" : \"YOUR_VALUE_2\" })) await asyncio . sleep ( 2 ) print ( await basicdweet . async_get_latest_dweet_for ( \"YOUR_THING\" )) await asyncio . sleep ( 2 ) print ( await basicdweet . async_get_dweets_for ( \"YOUR_THING\" )) asyncio . run ( async_test ()) Output {'thing': 'YOUR_THING', 'created': '2024-07-05T04:58:08.829Z', 'content': {'YOUR_DATA': 'YOUR_VALUE'}, 'transaction': '12d7e422-e8ce-408c-be0c-d61cc5d3d730'} [{'thing': 'YOUR_THING', 'created': '2024-07-05T04:58:08.829Z', 'content': {'YOUR_DATA': 'YOUR_VALUE'}}] {'thing': 'YOUR_THING', 'created': '2024-07-05T04:58:14.650Z', 'content': {'YOUR_DATA': 'YOUR_VALUE_2'}, 'transaction': 'ffbb2f4e-f954-4b4c-887e-7a492c0ce0ba'} [{'thing': 'YOUR_THING', 'created': '2024-07-05T04:58:14.650Z', 'content': {'YOUR_DATA': 'YOUR_VALUE_2'}}] [{'thing': 'YOUR_THING', 'created': '2024-07-05T04:58:14.650Z', 'content': {'YOUR_DATA': 'YOUR_VALUE_2'}}, {'thing': 'YOUR_THING', 'created': '2024-07-05T04:58:08.829Z', 'content': {'YOUR_DATA': 'YOUR_VALUE'}}] Test python -m pytest Build documentation mkdocs build","title":"Home"},{"location":"#basic-dweet","text":"Documentation Basic APIs of the free dweet service. Dweet is a simple machine-to-machine (M2M) service from dweet.io . This module only supports these dweet APIs of the free dweet service: dweet for get latest dweet for get dweets for It also can be used in MicroPython.","title":"Basic Dweet"},{"location":"#installation","text":"","title":"Installation"},{"location":"#synchronous-programming","text":"pip install basicdweet","title":"Synchronous Programming"},{"location":"#asynchronous-programming","text":"pip install basicdweet [ aiohttp ]","title":"Asynchronous Programming"},{"location":"#usage","text":"","title":"Usage"},{"location":"#synchronous-programming_1","text":"Code import time import basicdweet print ( basicdweet . dweet_for ( \"YOUR_THING\" , { \"YOUR_DATA\" : \"YOUR_VALUE\" })) time . sleep ( 2 ) print ( basicdweet . get_latest_dweet_for ( \"YOUR_THING\" )) time . sleep ( 2 ) print ( basicdweet . dweet_for ( \"YOUR_THING\" , { \"YOUR_DATA\" : \"YOUR_VALUE_2\" })) time . sleep ( 2 ) print ( basicdweet . get_latest_dweet_for ( \"YOUR_THING\" )) time . sleep ( 2 ) print ( basicdweet . get_dweets_for ( \"YOUR_THING\" )) Output {'thing': 'YOUR_THING', 'created': '2024-07-05T04:53:36.896Z', 'content': {'YOUR_DATA': 'YOUR_VALUE'}, 'transaction': '9cd0b361-05fc-451d-be7b-280172242f25'} [{'thing': 'YOUR_THING', 'created': '2024-07-05T04:53:36.896Z', 'content': {'YOUR_DATA': 'YOUR_VALUE'}}] {'thing': 'YOUR_THING', 'created': '2024-07-05T04:53:42.697Z', 'content': {'YOUR_DATA': 'YOUR_VALUE_2'}, 'transaction': '926d396d-cf41-4feb-89c3-46ffb0960053'} [{'thing': 'YOUR_THING', 'created': '2024-07-05T04:53:42.697Z', 'content': {'YOUR_DATA': 'YOUR_VALUE_2'}}] [{'thing': 'YOUR_THING', 'created': '2024-07-05T04:53:42.697Z', 'content': {'YOUR_DATA': 'YOUR_VALUE_2'}}, {'thing': 'YOUR_THING', 'created': '2024-07-05T04:53:36.896Z', 'content': {'YOUR_DATA': 'YOUR_VALUE'}}]","title":"Synchronous Programming"},{"location":"#asynchronous-programming_1","text":"Code import asyncio import basicdweet async def async_test (): print ( await basicdweet . async_dweet_for ( \"YOUR_THING\" , { \"YOUR_DATA\" : \"YOUR_VALUE\" })) await asyncio . sleep ( 2 ) print ( await basicdweet . async_get_latest_dweet_for ( \"YOUR_THING\" )) await asyncio . sleep ( 2 ) print ( await basicdweet . async_dweet_for ( \"YOUR_THING\" , { \"YOUR_DATA\" : \"YOUR_VALUE_2\" })) await asyncio . sleep ( 2 ) print ( await basicdweet . async_get_latest_dweet_for ( \"YOUR_THING\" )) await asyncio . sleep ( 2 ) print ( await basicdweet . async_get_dweets_for ( \"YOUR_THING\" )) asyncio . run ( async_test ()) Output {'thing': 'YOUR_THING', 'created': '2024-07-05T04:58:08.829Z', 'content': {'YOUR_DATA': 'YOUR_VALUE'}, 'transaction': '12d7e422-e8ce-408c-be0c-d61cc5d3d730'} [{'thing': 'YOUR_THING', 'created': '2024-07-05T04:58:08.829Z', 'content': {'YOUR_DATA': 'YOUR_VALUE'}}] {'thing': 'YOUR_THING', 'created': '2024-07-05T04:58:14.650Z', 'content': {'YOUR_DATA': 'YOUR_VALUE_2'}, 'transaction': 'ffbb2f4e-f954-4b4c-887e-7a492c0ce0ba'} [{'thing': 'YOUR_THING', 'created': '2024-07-05T04:58:14.650Z', 'content': {'YOUR_DATA': 'YOUR_VALUE_2'}}] [{'thing': 'YOUR_THING', 'created': '2024-07-05T04:58:14.650Z', 'content': {'YOUR_DATA': 'YOUR_VALUE_2'}}, {'thing': 'YOUR_THING', 'created': '2024-07-05T04:58:08.829Z', 'content': {'YOUR_DATA': 'YOUR_VALUE'}}]","title":"Asynchronous Programming"},{"location":"#test","text":"python -m pytest","title":"Test"},{"location":"#build-documentation","text":"mkdocs build","title":"Build documentation"},{"location":"api/","text":"API Documentation basicdweet package basicdweet Basic APIs of the free dweet service. Author: Quan Lin License: MIT Classes BasicDweetError Functions dweet_for \u2014 The dweet for API. get_latest_dweet_for \u2014 The get latest dweet for API. get_dweets_for \u2014 The get dweets for API. async_dweet_for \u2014 The async dweet for API. async_get_latest_dweet_for \u2014 The async get latest dweet for API. async_get_dweets_for \u2014 The async get dweets for API. basicdweet . basicdweet .dweet_for function dweet_for ( thing_name : str , payload : dict , base_url : str = DEFAULT_BASE_URL , ** kwargs ) \u2192 dict The dweet for API. Parameters thing_name : str \u2014 The name of the thing to dweet. payload : dict \u2014 The content of the thing to dweet. It is passed to json.dumps . So a dict fits it the best. base_url : str \u2014 The base url of the dweet server. (default is \"https://dweet.io\") Returns dict \u2014 The dweet transaction dict returned from dweet service. It should include the keys of thing , content , created and transaction . basicdweet . basicdweet .get_latest_dweet_for function get_latest_dweet_for ( thing_name : str , base_url : str = DEFAULT_BASE_URL , ** kwargs ) \u2192 list The get latest dweet for API. Parameters thing_name : str \u2014 The name of the thing to dweet. base_url : str \u2014 The base url of the dweet server. (default is \"https://dweet.io\") Returns list \u2014 The list of dweet transaction dicts. There is only the latest transaction dict in it. basicdweet . basicdweet .get_dweets_for function get_dweets_for ( thing_name : str , base_url : str = DEFAULT_BASE_URL , ** kwargs ) \u2192 list The get dweets for API. Parameters thing_name : str \u2014 The name of the thing to dweet. base_url : str \u2014 The base url of the dweet server. (default is \"https://dweet.io\") Returns list \u2014 The list of dweet transaction dicts. There are a few the latest transaction dicts in it. basicdweet . basicdweet .async_dweet_for function async_dweet_for ( thing_name : str , payload : dict , base_url : str = DEFAULT_BASE_URL , ** kwargs ) \u2192 dict The async dweet for API. The arguments have the same meaning as in dweet_for . basicdweet . basicdweet .async_get_latest_dweet_for function async_get_latest_dweet_for ( thing_name : str , base_url : str = DEFAULT_BASE_URL , ** kwargs ) \u2192 list The async get latest dweet for API. The arguments have the same meaning as in get_latest_dweet_for . basicdweet . basicdweet .async_get_dweets_for function async_get_dweets_for ( thing_name : str , base_url : str = DEFAULT_BASE_URL , ** kwargs ) \u2192 list The async get dweets for API. The arguments have the same meaning as in get_dweets_for .","title":"API Documentation"},{"location":"api/#api-documentation","text":"basicdweet package basicdweet Basic APIs of the free dweet service. Author: Quan Lin License: MIT Classes BasicDweetError Functions dweet_for \u2014 The dweet for API. get_latest_dweet_for \u2014 The get latest dweet for API. get_dweets_for \u2014 The get dweets for API. async_dweet_for \u2014 The async dweet for API. async_get_latest_dweet_for \u2014 The async get latest dweet for API. async_get_dweets_for \u2014 The async get dweets for API. basicdweet . basicdweet .dweet_for function dweet_for ( thing_name : str , payload : dict , base_url : str = DEFAULT_BASE_URL , ** kwargs ) \u2192 dict The dweet for API. Parameters thing_name : str \u2014 The name of the thing to dweet. payload : dict \u2014 The content of the thing to dweet. It is passed to json.dumps . So a dict fits it the best. base_url : str \u2014 The base url of the dweet server. (default is \"https://dweet.io\") Returns dict \u2014 The dweet transaction dict returned from dweet service. It should include the keys of thing , content , created and transaction . basicdweet . basicdweet .get_latest_dweet_for function get_latest_dweet_for ( thing_name : str , base_url : str = DEFAULT_BASE_URL , ** kwargs ) \u2192 list The get latest dweet for API. Parameters thing_name : str \u2014 The name of the thing to dweet. base_url : str \u2014 The base url of the dweet server. (default is \"https://dweet.io\") Returns list \u2014 The list of dweet transaction dicts. There is only the latest transaction dict in it. basicdweet . basicdweet .get_dweets_for function get_dweets_for ( thing_name : str , base_url : str = DEFAULT_BASE_URL , ** kwargs ) \u2192 list The get dweets for API. Parameters thing_name : str \u2014 The name of the thing to dweet. base_url : str \u2014 The base url of the dweet server. (default is \"https://dweet.io\") Returns list \u2014 The list of dweet transaction dicts. There are a few the latest transaction dicts in it. basicdweet . basicdweet .async_dweet_for function async_dweet_for ( thing_name : str , payload : dict , base_url : str = DEFAULT_BASE_URL , ** kwargs ) \u2192 dict The async dweet for API. The arguments have the same meaning as in dweet_for . basicdweet . basicdweet .async_get_latest_dweet_for function async_get_latest_dweet_for ( thing_name : str , base_url : str = DEFAULT_BASE_URL , ** kwargs ) \u2192 list The async get latest dweet for API. The arguments have the same meaning as in get_latest_dweet_for . basicdweet . basicdweet .async_get_dweets_for function async_get_dweets_for ( thing_name : str , base_url : str = DEFAULT_BASE_URL , ** kwargs ) \u2192 list The async get dweets for API. The arguments have the same meaning as in get_dweets_for .","title":"API Documentation"}]}